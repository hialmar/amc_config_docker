# Proprietes de l'application
spring:
  application:
    name: amccomptes
  data:
    mongodb:
      host: banque-mongo  # URL mongodb
      port: 27017
      database: banque-spring
      username: root
      password: root
      authentication-database: admin
  cloud:
    # Activation remontée management dans Eureka
    config:
      service-registry:
        auto-registration:
          register-management: on
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://dev-nj3gclnzfe2tmzvt.us.auth0.com/
          jwk-set-uri: https://dev-nj3gclnzfe2tmzvt.us.auth0.com/.well-known/jwks.json

okta:
  oauth2:
    issuer: https://dev-nj3gclnzfe2tmzvt.us.auth0.com/
    audience: http://localhost:10000

# Activation des endpoints pour le monitoring
management:
  endpoints:
    web:
      exposure:
        include:
          env,health,
          info,metrics,
          loggers,mappings, prometheus
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://banque-zipkin:9411/api/v2/spans
# Configuration client de l'annuaire
# Le serveur comptes va s'enregistrer comme un micro-service sur l'annuaire
eureka:
  client:
    serviceUrl:
      defaultZone: http://banque-annuaire:10001/eureka/ # url d'accès à l'annuaire
  instance:
    metadata-map:
      prometheus.scrape: "true"
      prometheus.path: "/actuator/prometheus"
      prometheus.port: "${management.server.port}"
      #    instance:
      #      metadataMap:
      # on va surcharger le nom de l'application si plusieurs instances de Client-service ont même IP et même port
      # on surcharge par une valeur random si le nom de l'instance existe déjà.
#        instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}}


# Configuration du log.
logging:
  level:
    org.springframework.web: INFO # Choix du niveau de log affiché

# Proprietes du serveur d'entreprise
server:
  port: 10002   # HTTP (Tomcat) port

